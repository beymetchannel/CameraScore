<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>カメラUI＋ネオン縦四角</title>
<style>
@font-face {
    font-family: 'CyberFont';
    src: url('fonts/CyberFont.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    overflow: hidden;
    background: black;
    font-family: 'CyberFont', sans-serif;
}

video#camera {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
}

.ui-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
}

.cyber-border {
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    pointer-events: none;
    z-index: 2;
    border: 4px solid #0ff;
    box-shadow:
        0 0 20px #0ff,
        0 0 40px #0ff,
        0 0 60px #0ff inset;
    border-radius: 10px;
    animation: glow 2s infinite alternate;
}

@keyframes glow {
    0% { box-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff inset; }
    50% { box-shadow: 0 0 20px #0ff, 0 0 40px #0ff, 0 0 60px #0ff inset; }
    100% { box-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff inset; }
}

/* 左右ブロック */
.left-block, .right-block {
    position: absolute;
    top: 20px;
    display: flex;
    flex-direction: column;
    pointer-events: auto;
}

.left-block { left: 20px; align-items: flex-start; }
.right-block { right: 20px; align-items: flex-end; }

/* プルダウン */
select {
    font-family: 'CyberFont', sans-serif;
    font-weight: bold;
    font-size: 22px; 
    padding: 10px 12px; 
    background: rgba(0,0,0,0.7);
    color: #fff; /* 文字は白で見やすく */
    border: 2px solid; /* 色は左右で変える */
    border-radius: 8px;
    appearance: none;
    cursor: pointer;
    margin-bottom: 10px;
    width: 35vw; 
    max-width: 35vw;
    box-sizing: border-box;
}

/* 左右で選択ボックスの縁色を変更 */
.left-block select { border-color: #aaffff; } /* 白っぽい青 */
.right-block select { border-color: #ffaaaa; } /* 白っぽい赤ピンク */

/* 四角＋スコア */
.frame-container {
    display: flex;
    flex-direction: column; 
    align-items: center;
}

.right-block .frame-container {
    flex-direction: column; 
    align-items: center;
}

.frame {
    width: 60px;
    height: 60px;
    border: 3px solid;
    border-radius: 8px 8px 0 0; 
    position: relative;
    box-shadow: 0 0 15px, 0 0 30px inset; 
    transition: transform 0.3s, box-shadow 0.3s;
}

/* 隣接する四角は上角丸を無効にして繋げる */
.frame + .frame {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}

/* 左右の色・光 */
.blue { 
    border-color: #aaffff; 
    box-shadow: 0 0 15px #aaffff, 0 0 30px #aaffff inset; 
}

.pink { 
    border-color: #ffaaaa; 
    box-shadow: 0 0 15px #ffaaaa, 0 0 30px #ffaaaa inset; 
}

/* ホバーで光る */
.frame:hover {
    transform: scale(1.05);
    box-shadow: 0 0 25px, 0 0 50px inset;
}

.score {
    font-size: 36px;
    color: #fff;
    text-align: center;
    margin-top: 5px;
    text-shadow: 0 0 15px, 0 0 30px;
}
</style>
</head>
<body>

<video id="camera" autoplay playsinline></video>

<div class="cyber-border"></div>

<div class="ui-layer">
    <!-- 左側 -->
    <div class="left-block">
        <select>
            <option>選択1</option>
            <option>選択2</option>
            <option>選択3</option>
        </select>
        <div class="frame-container">
            <div class="frame blue"></div>
            <div class="frame blue"></div>
            <div class="frame blue"></div>
            <div class="frame blue"></div>
            <div class="score" id="score-left">0</div>
        </div>
    </div>

    <!-- 右側 -->
    <div class="right-block">
        <select>
            <option>選択1</option>
            <option>選択2</option>
            <option>選択3</option>
        </select>
        <div class="frame-container">
            <div class="frame pink"></div>
            <div class="frame pink"></div>
            <div class="frame pink"></div>
            <div class="frame pink"></div>
            <div class="score" id="score-right">0</div>
        </div>
    </div>
</div>

<script>
const video = document.getElementById('camera');
navigator.mediaDevices.getUserMedia({ video: true, audio: false })
    .then(stream => { video.srcObject = stream; })
    .catch(err => { console.error('カメラ取得エラー:', err); });
</script>

</body>
</html>